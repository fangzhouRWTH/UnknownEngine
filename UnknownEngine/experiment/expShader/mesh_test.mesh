#version 450

#extension GL_EXT_mesh_shader: require
#extension GL_GOOGLE_include_directive: require

#include "mesh_shader_shared.h"

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;
// we'll emit 4 vertices on 2 primitives per mesh shader invocation
layout(triangles, max_vertices = 4, max_primitives = 2) out;

struct SData {
  vec3 position;
  vec3 offsets[64];
  vec3 size;
  vec3 baseColor[64];
};

taskPayloadSharedEXT SData sharedData;

layout(binding = 0) uniform UBO {
  mat4 view;
  mat4 proj;
  mat4 view_proj;

  vec4 color1;
  vec4 color2;
  vec4 color3;
  vec4 color4;

  float cull_center_x;
  float cull_center_y;
  float cull_radius;
  float meshlet_density;

  uint instanceCount;
}
ubo;
// Example of a default output layout and location format:
layout (location=3) out vec3 outColor[];

void main()
{
    if ( gl_LocalInvocationIndex == 0 )
    {
        SetMeshOutputsEXT( 4 , 2 );
    }

    vec3 globalOffset = sharedData.offsets[gl_WorkGroupID.x];
    vec3 localSize = sharedData.size / gl_WorkGroupSize.xyz;
    vec3 localOffset = gl_LocalInvocationID.xyz * localSize;
    vec3 v0 = sharedData.position + globalOffset + localOffset;
    vec3 v1 = v0 + vec3( localSize.x/2.0, 0.0 , 0.0);
    vec3 v2 = v0 + vec3( localSize.xy/2.0, 0.0);
    vec3 v3 = v0 + vec3( 0.0f, localSize.y/2.0 ,0.0);

    uint vertexBaseIndex = 4 * gl_LocalInvocationIndex;
    gl_MeshVerticesEXT[vertexBaseIndex + 0].gl_Position = ubo.view_proj * vec4( v0, 1.0f );
    gl_MeshVerticesEXT[vertexBaseIndex + 1].gl_Position = ubo.view_proj * vec4( v1, 1.0f );
    gl_MeshVerticesEXT[vertexBaseIndex + 2].gl_Position = ubo.view_proj * vec4( v2, 1.0f );
    gl_MeshVerticesEXT[vertexBaseIndex + 3].gl_Position = ubo.view_proj * vec4( v3, 1.0f );

    // gl_MeshVerticesEXT[vertexBaseIndex + 0].gl_Position = vec4( -0.5,-0.5,1.0, 1.0f );
    // gl_MeshVerticesEXT[vertexBaseIndex + 1].gl_Position = vec4( 0.5,-0.5,1.0, 1.0f );
    // gl_MeshVerticesEXT[vertexBaseIndex + 2].gl_Position = vec4( 0.5,0.5,1.0, 1.0f );
    // gl_MeshVerticesEXT[vertexBaseIndex + 3].gl_Position = vec4( -0.5,0.5,1.0, 1.0f );

    uint primitiveBaseIndex = 2 * gl_LocalInvocationIndex;
    gl_PrimitiveTriangleIndicesEXT[primitiveBaseIndex + 0] = uvec3( vertexBaseIndex + 0, vertexBaseIndex + 1, vertexBaseIndex + 2 );
    gl_PrimitiveTriangleIndicesEXT[primitiveBaseIndex + 1] = uvec3( vertexBaseIndex + 2, vertexBaseIndex + 3, vertexBaseIndex + 0 );

    float value = float(gl_LocalInvocationIndex)/10.f;
    //vec3 color = vec3(value) * sharedData.baseColor[gl_WorkGroupID.x];
    // vec3 color = vec3(1.0,0.0,0.0);
    // outColor[vertexBaseIndex + 0] = ubo.color1.xyz;
    // outColor[vertexBaseIndex + 1] = ubo.color2.xyz;
    // outColor[vertexBaseIndex + 2] = ubo.color3.xyz;
    // outColor[vertexBaseIndex + 3] = ubo.color4.xyz;

    outColor[vertexBaseIndex + 0] = sharedData.baseColor[gl_WorkGroupID.x];
    outColor[vertexBaseIndex + 1] = sharedData.baseColor[gl_WorkGroupID.x];
    outColor[vertexBaseIndex + 2] = sharedData.baseColor[gl_WorkGroupID.x];
    outColor[vertexBaseIndex + 3] = sharedData.baseColor[gl_WorkGroupID.x];


}