#version 450

#extension GL_EXT_mesh_shader : require
#extension GL_GOOGLE_include_directive : require
#extension GL_KHR_shader_subgroup_ballot : require

layout(local_size_x = 4, local_size_y = 4, local_size_z = 4) in;

struct SData {
  vec3 position;
  vec3 offsets[64];
  vec3 size;
  vec3 baseColor[64];
};

taskPayloadSharedEXT SData sharedData;

layout(binding = 0) uniform UBO {
  mat4 view;
  mat4 proj;
  mat4 view_proj;

  vec4 color1;
  vec4 color2;
  vec4 color3;
  vec4 color4;

  float cull_center_x;
  float cull_center_y;
  float cull_radius;
  float meshlet_density;
}ubo;

struct InstanceData
{
  mat4 transform;
  vec4 color;
};

layout(std430, binding = 1) buffer Instances
{
  InstanceData instanceData[18432];
};

void main() {
  vec3 size = 100.0f / (gl_NumWorkGroups.xyz * gl_WorkGroupSize.xyz);
  vec3 offset = (gl_GlobalInvocationID.xyz - (gl_NumWorkGroups.xyz * gl_WorkGroupSize.xyz) / 2.0) * size;//;

  uint instanceIndex = gl_GlobalInvocationID.x
            + gl_GlobalInvocationID.y * gl_NumWorkGroups.x * gl_WorkGroupSize.x
            + gl_GlobalInvocationID.z * gl_NumWorkGroups.x * gl_WorkGroupSize.x * gl_NumWorkGroups.y * gl_WorkGroupSize.y;

  uint index = gl_LocalInvocationIndex;
  //sharedData.offsets[index] = offset;
  sharedData.offsets[index] = instanceData[instanceIndex].transform[3].xyz;
  //sharedData.baseColor[index] = vec3(1.0);
  sharedData.baseColor[index] = instanceData[instanceIndex].color.xyz;

  if (gl_LocalInvocationIndex == 0) {
    // for just one task shader invocation we can emit mesh shaders
    vec3 position = vec3(0.0);
    sharedData.position = position;
    sharedData.size = size;
    // get the actual number of task shader invocations that are determined to
    // display something
    uint validCount = 64;//8 * 8 * 8;
    EmitMeshTasksEXT(validCount, 1, 1);
  }
}